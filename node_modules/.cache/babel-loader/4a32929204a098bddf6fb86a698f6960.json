{"ast":null,"code":"/* Todo\n\t* Create a refresh button?\n\n\n*/\nexport default {\n  name: 'HelloWorld2',\n  props: {\n    msg2: String\n  },\n\n  data() {\n    return {\n      users: null,\n      filledData: null,\n      columns: null,\n      message: \"\"\n    };\n  },\n\n  async created() {\n    const data_fetched = false; //Fetch the data upon creation of the component.\n\n    while (data_fetched === false) {\n      try {\n        const response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n        const response_json = await response.json();\n        this.users = response_json.data;\n        this.message = response_json.message;\n        console.log(response_json);\n        break;\n      } catch (e) {\n        console.log(\"Error occured\"); // Some type of sleep function? Not really sure how this too many requests occur.\n\n        continue;\n      }\n    }\n\n    await this.fillOutData();\n    this.columns = this.updateColumns();\n  },\n\n  computed: {},\n  methods: {\n    fillOutData() {\n      // We should not assume that all keys are the same in the rows.\n      let keyValues = [];\n      this.filledData = this.users;\n\n      for (let i = 0; i < this.filledData.length; i++) {\n        for (let key in this.filledData[i]) {\n          if (!keyValues.includes(key)) {\n            keyValues.push(key);\n          } //console.log(key)\n\n        }\n      } //console.log(keyValues)\n\n\n      for (let i = 0; i < this.filledData.length; i++) {\n        for (let j = 0; j < keyValues.length; j++) {\n          //console.log(this.filledData[i][keyValues[j]])\n          //console.log(keyValues[j])\n          if (!(keyValues[j] in this.filledData[i])) {\n            this.filledData[i][keyValues[j]] = 'unknown';\n          }\n        }\n      }\n    },\n\n    updateColumns() {\n      //Gets columns based on our computed value.\n      const columns = [];\n\n      if (this.filledData !== null) {\n        // Should try if an empty list crashes this!\n        for (let key in this.filledData[0]) {\n          columns.push(key);\n        }\n      } else {\n        console.log(\"Return null in getColumns\");\n        return null;\n      }\n\n      console.log(\"Returning columns\");\n      console.log(columns);\n      return columns;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAmDA;;;;AAIA;AAEA,eAAe;AACdA,MAAI,EAAE,aADQ;AAEdC,OAAK,EAAE;AACNC,QAAI,EAAEC;AADA,GAFO;;AAMdC,MAAG,GAAK;AACP,WAAO;AACNC,WAAK,EAAE,IADD;AAENC,gBAAU,EAAE,IAFN;AAGNC,aAAO,EAAE,IAHH;AAINC,aAAO,EAAE;AAJH,KAAP;AAMA,GAba;;AAed,QAAMC,OAAN,GAAiB;AAChB,UAAMC,YAAW,GAAI,KAArB,CADgB,CAGhB;;AACA,WAAOA,YAAW,KAAM,KAAxB,EAA+B;AAC9B,UAAI;AACH,cAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,kDAAD,CAA5B;AACA,cAAMC,aAAY,GAAI,MAAMF,QAAQ,CAACG,IAAT,EAA5B;AAEA,aAAKT,KAAL,GAAaQ,aAAa,CAACT,IAA3B;AACA,aAAKI,OAAL,GAAeK,aAAa,CAACL,OAA7B;AACAO,eAAO,CAACC,GAAR,CAAYH,aAAZ;AACA;AACD,OARA,CAQE,OAAOI,CAAP,EAAU;AACXF,eAAO,CAACC,GAAR,CAAY,eAAZ,EADW,CAEX;;AACA;AACD;AACD;;AACA,UAAM,KAAKE,WAAL,EAAN;AACA,SAAKX,OAAL,GAAe,KAAKY,aAAL,EAAf;AAEA,GArCa;;AAuCdC,UAAQ,EAAE,EAvCI;AA2CdC,SAAO,EAAE;AACRH,eAAU,GAAK;AACd;AACA,UAAII,SAAQ,GAAI,EAAhB;AACA,WAAKhB,UAAL,GAAkB,KAAKD,KAAvB;;AAEA,WAAK,IAAIkB,IAAI,CAAb,EAAgBA,IAAI,KAAKjB,UAAL,CAAgBkB,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAChD,aAAK,IAAIE,GAAT,IAAgB,KAAKnB,UAAL,CAAgBiB,CAAhB,CAAhB,EAAoC;AACnC,cAAI,CAACD,SAAS,CAACI,QAAV,CAAmBD,GAAnB,CAAL,EAA8B;AAC7BH,qBAAS,CAACK,IAAV,CAAeF,GAAf;AACD,WAHmC,CAInC;;AACD;AACD,OAZc,CAad;;;AAEA,WAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAI,KAAKjB,UAAL,CAAgBkB,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAChD,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIN,SAAS,CAACE,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AAC1C;AACA;AACA,cAAI,EAAEN,SAAS,CAACM,CAAD,CAAT,IAAgB,KAAKtB,UAAL,CAAgBiB,CAAhB,CAAlB,CAAJ,EAA2C;AAC1C,iBAAKjB,UAAL,CAAgBiB,CAAhB,EAAmBD,SAAS,CAACM,CAAD,CAA5B,IAAmC,SAAnC;AACD;AACD;AACD;AACA,KAzBO;;AA0BRT,iBAAY,GAAK;AAChB;AACA,YAAMZ,OAAM,GAAI,EAAhB;;AAEA,UAAI,KAAKD,UAAL,KAAoB,IAAxB,EAA8B;AAC7B;AACA,aAAK,IAAImB,GAAT,IAAgB,KAAKnB,UAAL,CAAgB,CAAhB,CAAhB,EAAoC;AACnCC,iBAAO,CAACoB,IAAR,CAAaF,GAAb;AACD;AACD,OALA,MAKO;AACNV,eAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,eAAO,IAAP;AACD;;AACAD,aAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,aAAO,CAACC,GAAR,CAAYT,OAAZ;AACA,aAAOA,OAAP;AACA;;AA1CO;AA3CK,CAAf","names":["name","props","msg2","String","data","users","filledData","columns","message","created","data_fetched","response","fetch","response_json","json","console","log","e","fillOutData","updateColumns","computed","methods","keyValues","i","length","key","includes","push","j"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Table.vue"],"sourcesContent":["<template>\n  <div class=\"table\">\n\t<table id=\"myTable1\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<!---Could change so i read in the Table headers as variables instead\n\t\t\t\t\tThen need to to a valitidy check of the data, so that all items in the json object\n\t\t\t\t\tcontains the same keys and values.\n\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t<th>Employee Name</th>\n\t\t\t\t\t<th>Employee Salary</th>\n\t\t\t\t\t<th>Employee Age</th>\n\t\t\t\t\t<th>Profile Image</th>\n\t\t\t\t-->\n\t\t\t\t<th v-for=\"(col, i) in columns\" :key=\"i\"\n\t\t\t\tv-on:click=\"sortData(col)\">{{ col }}</th>\n\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr v-for=\"(user, i) in filledData\" :key=\"i\">\n\t\t\t\t<td v-for=\"(val, j) in user\" :key=\"j\">{{ val }}</td>\n\t\t\t\t<!---\n\t\t\t\t<td> {{ user.id }} </td>\n\t\t\t\t<td> {{ user.employee_name}} </td>\n\t\t\t\t<td> {{ user.employee_salary }} </td>\n\t\t\t\t<td> {{ user.employee_age }} </td>\n\t\t\t\t<td> {{ user.profile_image}} </td>\n\t\t\t-->\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<!---\n\t\t\t\t<th v-for=\"col in columns\">\n\t\t\t\t\t{{col}}\n\t\t\t\t</th>\n\t\t\t-->\n\t\t\t</tr>\n\t\t</thead>\n\n\t</table>\n\t<p>{{ filledData }}</p>\n  </div>\n</template>\n\n\n\n<script>\n/* Todo\n\t* Create a refresh button?\n\n\n*/\n\nexport default {\n\tname: 'HelloWorld2',\n\tprops: {\n\t\tmsg2: String,\n\t},\n\n\tdata () {\n\t\treturn {\n\t\t\tusers: null,\n\t\t\tfilledData: null,\n\t\t\tcolumns: null,\n\t\t\tmessage: \"\",\n\t\t}\n\t},\n\n\tasync created () {\n\t\tconst data_fetched = false\n\n\t\t//Fetch the data upon creation of the component.\n\t\twhile (data_fetched === false) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t\tconst response_json = await response.json()\n\n\t\t\t\tthis.users = response_json.data\n\t\t\t\tthis.message = response_json.message\n\t\t\t\tconsole.log(response_json)\n\t\t\t\tbreak;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Error occured\")\n\t\t\t\t// Some type of sleep function? Not really sure how this too many requests occur.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tawait this.fillOutData();\n\t\tthis.columns = this.updateColumns()\n\n\t},\n\n\tcomputed: {\n\n\t},\n\n\tmethods: {\n\t\tfillOutData () {\n\t\t\t// We should not assume that all keys are the same in the rows.\n\t\t\tlet keyValues = []\n\t\t\tthis.filledData = this.users\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let key in this.filledData[i]) {\n\t\t\t\t\tif (!keyValues.includes(key)) {\n\t\t\t\t\t\tkeyValues.push(key)\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(key)\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(keyValues)\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let j = 0; j < keyValues.length; j++) {\n\t\t\t\t\t//console.log(this.filledData[i][keyValues[j]])\n\t\t\t\t\t//console.log(keyValues[j])\n\t\t\t\t\tif (!(keyValues[j] in this.filledData[i])) {\n\t\t\t\t\t\tthis.filledData[i][keyValues[j]] = 'unknown';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateColumns () {\n\t\t\t//Gets columns based on our computed value.\n\t\t\tconst columns = []\n\n\t\t\tif (this.filledData !== null) {\n\t\t\t\t// Should try if an empty list crashes this!\n\t\t\t\tfor (let key in this.filledData[0]) {\n\t\t\t\t\tcolumns.push(key)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Return null in getColumns\")\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tconsole.log(\"Returning columns\")\n\t\t\tconsole.log(columns)\n\t\t\treturn columns\n\t\t},\n\t}\n}\n\n\n</script>\n\n<style scoped>\n\ntable {\n  font-family: 'Open Sans', sans-serif;\n  width: 750px;\n  border-collapse: collapse;\n  border: 3px solid #44475C;\n  margin: 10px 10px 0 10px;\n}\n\ntable th {\n  text-transform: uppercase;\n  text-align: left;\n  background: #44475C;\n  color: #FFF;\n  padding: 8px;\n  min-width: 30px;\n}\n\ntable td {\n  text-align: left;\n  padding: 8px;\n  border-right: 2px solid #7D82A8;\n}\ntable td:last-child {\n  border-right: none;\n}\ntable tbody tr:nth-child(2n) td {\n  background: #D4D8F9;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}