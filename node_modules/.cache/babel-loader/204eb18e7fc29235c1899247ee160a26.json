{"ast":null,"code":"import Table from './Table.vue';\nimport Dots from './Dots.vue';\nexport default {\n  name: 'HelloWorld',\n  components: {\n    Table,\n    Dots\n  },\n  props: {},\n\n  data() {\n    return {\n      completed: false\n    };\n  },\n\n  async mounted() {// Try Async\n\n    /*\n    const response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n    const tmp = await response.data;\n    if (response.status == 429) {\n    \tthis.exitCode = \"429\";\n    \tthis.completed = false\n    }\n    else {\n    \tthis.exitCode = \"OK!\"\n    \tconsole.log(tmp)\n    \tthis.completed = true\n    }\n    this.APIData = tmp;\n    */\n\n    /* //Not Async\n    fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n    \t.then(response => {\n    \tthis.APIData = response.data;\n    \tconsole.log(this.APIData)\n    \t})\n    \t.catch(error => {\n    \t\talert(error)\n    \t})\n    \tthis.testing = typeof(this.APIData)\n    */\n\n    /*\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    this.vueCanvas = ctx;\n    console.log(this.vueCanvas)\n    \tcanvas.height = window.innerHeight;\n    canvas.width = window.innerWidth;\n    console.log(canvas.height, canvas.width)\n    \tctx.fillStyle = \"#42b983\"\n    ctx.arc(600,200,50,0, 3.14*2);\n    ctx.fill()\n    */\n  },\n\n  methods: {}\n};","map":{"version":3,"mappings":"AAeA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,eAAe;AACdC,MAAI,EAAE,YADQ;AAEdC,YAAU,EAAE;AACXH,SADW;AAEXC;AAFW,GAFE;AAMdG,OAAK,EAAE,EANO;;AASdC,MAAI,GAAG;AACN,WAAO;AACNC,eAAS,EAAE;AADL,KAAP;AAGA,GAba;;AAed,QAAMC,OAAN,GAAgB,CACf;;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;AAWA;;;;;;;;;;;;AAcA,GAzDa;;AA2DdC,SAAO,EAAE;AA3DK,CAAf","names":["Table","Dots","name","components","props","data","completed","mounted","methods"],"sourceRoot":"","sources":["/Users/cakste/test/greater_work/src/components/Home.vue"],"sourcesContent":["<template>\n\t<div id=\"app\">\n\t\t<div style=\"left: 0px; top: 0px; width:100%; height: 100%;\">\n\t\t\t<img alt=\"Greater Than Logo Straight From The Source\" src=\"https://greaterthan.eu/wp-content/themes/greaterthan/assets/img/logo.svg\">\n\t\t\t<Table />\n\t\t</div>\n\t\t<div style=\"position: absolute; z-index: -1; left: 0px; top: 0px; width:100%; height:100%; background-color: #ffffff;\">\n\t\t\t<Dots />\n\t\t</div>\n\t</div>\n</template>\n\n<!--// Access a child components variables? Nice to include their message. -->\n\n<script>\nimport Table from './Table.vue'\nimport Dots from './Dots.vue'\n\nexport default {\n\tname: 'HelloWorld',\n\tcomponents: {\n\t\tTable,\n\t\tDots,\n\t},\n\tprops: {\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcompleted: false\n\t\t}\n\t},\n\n\tasync mounted() {\n\t\t// Try Async\n\t\t/*\n\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n\t\tconst tmp = await response.data;\n\t\tif (response.status == 429) {\n\t\t\tthis.exitCode = \"429\";\n\t\t\tthis.completed = false\n\t\t}\n\t\telse {\n\t\t\tthis.exitCode = \"OK!\"\n\t\t\tconsole.log(tmp)\n\t\t\tthis.completed = true\n\t\t}\n\t\tthis.APIData = tmp;\n\t\t*/\n\n\t\t/* //Not Async\n\t\tfetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t.then(response => {\n\t\t\tthis.APIData = response.data;\n\t\t\tconsole.log(this.APIData)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\talert(error)\n\t\t\t})\n\t\t\tthis.testing = typeof(this.APIData)\n\t\t*/\n\t\t/*\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tthis.vueCanvas = ctx;\n\t\tconsole.log(this.vueCanvas)\n\n\t\tcanvas.height = window.innerHeight;\n\t\tcanvas.width = window.innerWidth;\n\t\tconsole.log(canvas.height, canvas.width)\n\n\t\tctx.fillStyle = \"#42b983\"\n\t\tctx.arc(600,200,50,0, 3.14*2);\n\t\tctx.fill()\n\t\t*/\n\t},\n\n\tmethods: {\n\n\t},\n\n}\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n.alt {\n\tmargin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}