{"ast":null,"code":"export default {\n  name: 'HelloWorld',\n  components: {},\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      count: 1,\n      APIData: [],\n      exitCode: \"STILL FETCHING...\",\n      testing: [],\n      completed: false\n    };\n  },\n\n  mounted() {\n    // Try Async\n\n    /*\n    const response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n    const tmp = await response.data;\n    if (response.status == 429) {\n    \tthis.exitCode = \"429\";\n    \tthis.completed = false\n    }\n    else {\n    \tthis.exitCode = \"OK!\"\n    \tconsole.log(tmp)\n    \tthis.completed = true\n    }\n    this.APIData = tmp;\n    */\n\n    /* //Not Async\n    fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n    \t.then(response => {\n    \tthis.APIData = response.data;\n    \tconsole.log(this.APIData)\n    \t})\n    \t.catch(error => {\n    \t\talert(error)\n    \t})\n    \tthis.testing = typeof(this.APIData)\n    */\n    // ----------------------------------------\n    var canvas = 'canvas.dots'; //var context = canvas[0].getContext('2d');\n\n    var canvasWidth = canvas.width();\n    var canvasHeight = canvas.height();\n    let i;\n    console.log();\n    canvas.attr({\n      height: canvasHeight,\n      width: canvasWidth\n    }); // Set an array of dot objects.\n\n    var dots = [{\n      x: 100,\n      y: 100,\n      radius: 25,\n      xMove: '+',\n      yMove: '+'\n    }, {\n      x: 40,\n      y: 200,\n      radius: 25,\n      xMove: '-',\n      yMove: '+'\n    }, {\n      x: 250,\n      y: 300,\n      radius: 25,\n      xMove: '+',\n      yMove: '-'\n    }, {\n      x: 150,\n      y: 35,\n      radius: 25,\n      xMove: '-',\n      yMove: '-'\n    }]; // Notice in the moveDot function we can make dots go faster if we increment\n    // by more than 1 pixel each time.\n    //var frameLength = 2;\n    // Draw each dot in the dots array.\n\n    for (i = 0; i < dots.length; i++) {\n      this.drawDot(dots[i]);\n    } //window.requestAnimationFrame(moveDot);\n    // Render it again\n    //window.requestAnimationFrame(moveDot);\n\n  },\n\n  methods: {}\n}; // ----------------------------------------","map":{"version":3,"mappings":"AAWA,eAAe;AACdA,MAAI,EAAE,YADQ;AAEdC,YAAU,EAAE,EAFE;AAKdC,OAAK,EAAE;AACNC,OAAG,EAAEC;AADC,GALO;;AASdC,MAAI,GAAG;AACN,WAAO;AACNC,WAAK,EAAE,CADD;AAENC,aAAO,EAAE,EAFH;AAGNC,cAAQ,EAAE,mBAHJ;AAINC,aAAO,EAAE,EAJH;AAKNC,eAAS,EAAE;AALL,KAAP;AAOA,GAjBa;;AAmBdC,SAAO,GAAG;AACT;;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAYA;AAEA,QAAIC,MAAK,GAAI,aAAb,CA/BS,CAgCT;;AACA,QAAIC,WAAU,GAAID,MAAM,CAACE,KAAP,EAAlB;AACA,QAAIC,YAAW,GAAIH,MAAM,CAACI,MAAP,EAAnB;AACA,QAAIC,CAAJ;AAEAC,WAAO,CAACC,GAAR;AACAP,UAAM,CAACQ,IAAP,CAAY;AAACJ,YAAM,EAAED,YAAT;AAAuBD,WAAK,EAAED;AAA9B,KAAZ,EAtCS,CAwCT;;AACA,QAAIQ,IAAG,GAAI,CACV;AAAEC,OAAC,EAAE,GAAL;AAAUC,OAAC,EAAE,GAAb;AAAkBC,YAAM,EAAE,EAA1B;AAA8BC,WAAK,EAAE,GAArC;AAA0CC,WAAK,EAAE;AAAjD,KADU,EAEV;AAAEJ,OAAC,EAAE,EAAL;AAASC,OAAC,EAAE,GAAZ;AAAiBC,YAAM,EAAE,EAAzB;AAA6BC,WAAK,EAAE,GAApC;AAAyCC,WAAK,EAAE;AAAhD,KAFU,EAGV;AAAEJ,OAAC,EAAE,GAAL;AAAUC,OAAC,EAAE,GAAb;AAAkBC,YAAM,EAAE,EAA1B;AAA8BC,WAAK,EAAE,GAArC;AAA0CC,WAAK,EAAE;AAAjD,KAHU,EAIV;AAAEJ,OAAC,EAAE,GAAL;AAAUC,OAAC,EAAE,EAAb;AAAiBC,YAAM,EAAE,EAAzB;AAA6BC,WAAK,EAAE,GAApC;AAAyCC,WAAK,EAAE;AAAhD,KAJU,CAAX,CAzCS,CAgDT;AACA;AACA;AAEA;;AACA,SAAKT,IAAI,CAAT,EAAYA,IAAII,IAAI,CAACM,MAArB,EAA6BV,CAAC,EAA9B,EAAmC;AAClC,WAAKW,OAAL,CAAaP,IAAI,CAACJ,CAAD,CAAjB;AACD,KAvDS,CAyDT;AAKA;AACA;;AAGA,GArFa;;AAuFdY,SAAO,EAAE;AAvFK,CAAf,C,CAgGA","names":["name","components","props","msg","String","data","count","APIData","exitCode","testing","completed","mounted","canvas","canvasWidth","width","canvasHeight","height","i","console","log","attr","dots","x","y","radius","xMove","yMove","length","drawDot","methods"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Dots2.vue"],"sourcesContent":["<template>\n\t<div class=\"hello\">\n\t</div>\n\t<canvas class=\"dots\">Your browser does not support canvas.</canvas>\n\t<h1>skdl</h1>\n</template>\n\n<!--// Access a child components variables? Nice to include their message. -->\n\n<script>\n\nexport default {\n\tname: 'HelloWorld',\n\tcomponents: {\n\n\t},\n\tprops: {\n\t\tmsg: String\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcount: 1,\n\t\t\tAPIData: [],\n\t\t\texitCode: \"STILL FETCHING...\",\n\t\t\ttesting: [],\n\t\t\tcompleted: false\n\t\t}\n\t},\n\n\tmounted() {\n\t\t// Try Async\n\t\t/*\n\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n\t\tconst tmp = await response.data;\n\t\tif (response.status == 429) {\n\t\t\tthis.exitCode = \"429\";\n\t\t\tthis.completed = false\n\t\t}\n\t\telse {\n\t\t\tthis.exitCode = \"OK!\"\n\t\t\tconsole.log(tmp)\n\t\t\tthis.completed = true\n\t\t}\n\t\tthis.APIData = tmp;\n\t\t*/\n\n\t\t/* //Not Async\n\t\tfetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t.then(response => {\n\t\t\tthis.APIData = response.data;\n\t\t\tconsole.log(this.APIData)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\talert(error)\n\t\t\t})\n\t\t\tthis.testing = typeof(this.APIData)\n\t\t*/\n\n\t\t// ----------------------------------------\n\n\t\tvar canvas = 'canvas.dots';\n\t\t//var context = canvas[0].getContext('2d');\n\t\tvar canvasWidth = canvas.width();\n\t\tvar canvasHeight = canvas.height();\n\t\tlet i;\n\n\t\tconsole.log()\n\t\tcanvas.attr({height: canvasHeight, width: canvasWidth});\n\n\t\t// Set an array of dot objects.\n\t\tvar dots = [\n\t\t\t{ x: 100, y: 100, radius: 25, xMove: '+', yMove: '+' },\n\t\t\t{ x: 40, y: 200, radius: 25, xMove: '-', yMove: '+' },\n\t\t\t{ x: 250, y: 300, radius: 25, xMove: '+', yMove: '-' },\n\t\t\t{ x: 150, y: 35, radius: 25, xMove: '-', yMove: '-' }\n\t\t];\n\n\t\t// Notice in the moveDot function we can make dots go faster if we increment\n\t\t// by more than 1 pixel each time.\n\t\t//var frameLength = 2;\n\n\t\t// Draw each dot in the dots array.\n\t\tfor( i = 0; i < dots.length; i++ ) {\n\t\t\tthis.drawDot(dots[i]);\n\t\t}\n\n\t\t//window.requestAnimationFrame(moveDot);\n\n\n\n\n\t\t// Render it again\n\t\t//window.requestAnimationFrame(moveDot);\n\n\n\t},\n\n\tmethods: {\n\n\t},\n\n}\n\n\n\n\n// ----------------------------------------\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n.hello {\n\tmargin: 60px 0px 0px 0px\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}