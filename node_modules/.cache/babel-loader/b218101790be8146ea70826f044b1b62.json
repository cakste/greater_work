{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-264e9b7a\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Table = _resolveComponent(\"Table\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Table)]);\n}","map":{"version":3,"mappings":";;;;;AACMA,OAAK,EAAC;;;;;uBAAXC,oBAEM,KAFN,cAEM,CADLC,aAASC,gBAAT,CACK,CAFN","names":["class","_createElementBlock","_createVNode","_component_Table"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Dots.vue"],"sourcesContent":["<template>\n\t<div class=\"hello\">\n\t\t<Table />\n\t</div>\n</template>\n\n<!--// Access a child components variables? Nice to include their message. -->\n\n<script>\nimport Table from './Table.vue'\n\nexport default {\n\tname: 'HelloWorld',\n\tcomponents: {\n\t\tTable,\n\t},\n\tprops: {\n\t\tmsg: String\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcount: 1,\n\t\t\tAPIData: [],\n\t\t\texitCode: \"STILL FETCHING...\",\n\t\t\ttesting: [],\n\t\t\tcompleted: false\n\t\t}\n\t},\n\n\tasync mounted() {\n\t\t// Try Async\n\t\t/*\n\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n\t\tconst tmp = await response.data;\n\t\tif (response.status == 429) {\n\t\t\tthis.exitCode = \"429\";\n\t\t\tthis.completed = false\n\t\t}\n\t\telse {\n\t\t\tthis.exitCode = \"OK!\"\n\t\t\tconsole.log(tmp)\n\t\t\tthis.completed = true\n\t\t}\n\t\tthis.APIData = tmp;\n\t\t*/\n\n\t\t/* //Not Async\n\t\tfetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t.then(response => {\n\t\t\tthis.APIData = response.data;\n\t\t\tconsole.log(this.APIData)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\talert(error)\n\t\t\t})\n\t\t\tthis.testing = typeof(this.APIData)\n\t\t*/\n\t\t$(document).ready(function(){\n\n\t\t// ----------------------------------------\n\n\t\tvar canvas = $('canvas.dots');\n\t\tvar context = canvas[0].getContext('2d');\n\t\tvar canvasWidth = canvas.width();\n\t\tvar canvasHeight = canvas.height();\n\t\tlet i;\n\t\tcanvas.attr({height: canvasHeight, width: canvasWidth});\n\n\t\t// Set an array of dot objects.\n\t\tvar dots = [\n\t\t  { x: 100, y: 100, radius: 25, xMove: '+', yMove: '+' },\n\t\t  { x: 40, y: 200, radius: 25, xMove: '-', yMove: '+' },\n\t\t  { x: 250, y: 300, radius: 25, xMove: '+', yMove: '-' },\n\t\t  { x: 150, y: 35, radius: 25, xMove: '-', yMove: '-' }\n\t\t];\n\n\t\t// Notice in the moveDot function we can make dots go faster if we increment\n\t\t// by more than 1 pixel each time.\n\t\tvar frameLength = 2;\n\n\t\t// Draw each dot in the dots array.\n\t\tfor( i = 0; i < dots.length; i++ ) {\n\t\t  this.drawDot(dots[i]);\n\t\t}\n\n\t\twindow.requestAnimationFrame(moveDot);\n\n\n\t\tfunction moveDot() {\n\t\t  context.clearRect(0, 0, canvasWidth, canvasHeight)\n\n\t\t  // Iterate over all the dots.\n\t\t  for(let i = 0; i < dots.length; i++ ) {\n\n\t\t    if( dots[i].xMove == '+' ) {\n\t\t      dots[i].x += frameLength;\n\t\t    } else {\n\t\t      dots[i].x -= frameLength;\n\t\t    }\n\t\t    if( dots[i].yMove == '+' ) {\n\t\t      dots[i].y += frameLength;\n\t\t    } else {\n\t\t      dots[i].y -= frameLength;\n\t\t    }\n\n\t\t    this.drawDot(dots[i])\n\n\t\t    if( (dots[i].x + dots[i].radius) >= canvasWidth ) {\n\t\t      dots[i].xMove = '-';\n\t\t    }\n\t\t    if( (dots[i].x - dots[i].radius) <= 0 ) {\n\t\t      dots[i].xMove = '+';\n\t\t    }\n\t\t    if( (dots[i].y + dots[i].radius) >= canvasHeight ) {\n\t\t      dots[i].yMove = '-';\n\t\t    }\n\t\t    if( (dots[i].y - dots[i].radius) <= 0 ) {\n\t\t      dots[i].yMove = '+';\n\t\t    }\n\t\t  }\n\n\t\t  // Render it again\n\t\t  window.requestAnimationFrame(moveDot);\n\t  }\n\t  });\n\t},\n\n\tmethods: {\n\t\tincrement() {\n\t\t\tthis.count++\n\t\t},\n\t\tdrawDot(dot) {\n\t\t  this.context.beginPath();\n\t\t  this.context.arc(dot.x, dot.y, dot.radius, 0, 2 * Math.PI, false);\n\t\t  this.context.fillStyle = '#F03C69';\n\t\t  this.context.fill();\n\t\t}\n\t},\n\n}\n\n\n\n\n// ----------------------------------------\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n.hello {\n\tmargin: 60px 0px 0px 0px\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}