{"ast":null,"code":"export default {\n  name: 'backgroundDots',\n  components: {},\n\n  data() {\n    return {\n      count: 1,\n      vueCanvas: null\n    };\n  },\n\n  mounted() {\n    // Try Async\n\n    /*\n    const response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n    const tmp = await response.data;\n    if (response.status == 429) {\n    \tthis.exitCode = \"429\";\n    \tthis.completed = false\n    }\n    else {\n    \tthis.exitCode = \"OK!\"\n    \tconsole.log(tmp)\n    \tthis.completed = true\n    }\n    this.APIData = tmp;\n    */\n\n    /* //Not Async\n    fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n    \t.then(response => {\n    \tthis.APIData = response.data;\n    \tconsole.log(this.APIData)\n    \t})\n    \t.catch(error => {\n    \t\talert(error)\n    \t})\n    \tthis.testing = typeof(this.APIData)\n    */\n    // ----------------------------------------\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    this.vueCanvas = ctx;\n    console.log(this.vueCanvas);\n    canvas.height = window.innerHeight;\n    canvas.width = window.innerWidth;\n    console.log(canvas.height, canvas.width);\n    ctx.fillRect(0, 0, 1501, 300);\n    /*\n    var canvas = $('canvas.dots');\n    //var context = canvas[0].getContext('2d');\n    var canvasWidth = canvas.width();\n    var canvasHeight = canvas.height();\n    let i;\n    \tconsole.log(canvasWidth)\n    canvas.attr({height: canvasHeight, width: canvasWidth});\n    \t// Set an array of dot objects.\n    var dots = [\n    \t{ x: 100, y: 100, radius: 25, xMove: '+', yMove: '+' },\n    \t{ x: 40, y: 200, radius: 25, xMove: '-', yMove: '+' },\n    \t{ x: 250, y: 300, radius: 25, xMove: '+', yMove: '-' },\n    \t{ x: 150, y: 35, radius: 25, xMove: '-', yMove: '-' }\n    ];\n    \t// Notice in the moveDot function we can make dots go faster if we increment\n    // by more than 1 pixel each time.\n    //var frameLength = 2;\n    \t// Draw each dot in the dots array.\n    for( i = 0; i < dots.length; i++ ) {\n    \tthis.drawDot(dots[i]);\n    }\n    \t//window.requestAnimationFrame(moveDot);\n    \n    \t// Render it again\n    //window.requestAnimationFrame(moveDot);\n    */\n  },\n\n  methods: {}\n}; // ----------------------------------------","map":{"version":3,"mappings":"AAqBA,eAAe;AACdA,MAAI,EAAE,gBADQ;AAEdC,YAAU,EAAE,EAFE;;AAMdC,MAAI,GAAG;AACN,WAAO;AACNC,WAAK,EAAE,CADD;AAENC,eAAS,EAAE;AAFL,KAAP;AAIA,GAXa;;AAadC,SAAO,GAAG;AACT;;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAYA;AAGA,QAAIC,MAAK,GAAIC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIC,GAAE,GAAIH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AACA,SAAKN,SAAL,GAAiBK,GAAjB;AACAE,WAAO,CAACC,GAAR,CAAY,KAAKR,SAAjB;AAEAE,UAAM,CAACO,MAAP,GAAgBC,MAAM,CAACC,WAAvB;AACAT,UAAM,CAACU,KAAP,GAAeF,MAAM,CAACG,UAAtB;AACAN,WAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,MAAnB,EAA2BP,MAAM,CAACU,KAAlC;AAEAP,OAAG,CAACS,QAAJ,CAAa,CAAb,EAAe,CAAf,EAAiB,IAAjB,EAAsB,GAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,GA5Fa;;AA8FdC,SAAO,EAAE;AA9FK,CAAf,C,CAuGA","names":["name","components","data","count","vueCanvas","mounted","canvas","document","getElementById","ctx","getContext","console","log","height","window","innerHeight","width","innerWidth","fillRect","methods"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Dots2.vue"],"sourcesContent":["<template>\n\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Drawing App</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\">\n\t<canvas id=\"canvas\"></canvas>\n\t</div>\n\n\t</body>\n\t</html>\n</template>\n\n<!--// Access a child components variables? Nice to include their message. -->\n\n<script>\n\nexport default {\n\tname: 'backgroundDots',\n\tcomponents: {\n\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcount: 1,\n\t\t\tvueCanvas: null,\n\t\t}\n\t},\n\n\tmounted() {\n\t\t// Try Async\n\t\t/*\n\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n\t\tconst tmp = await response.data;\n\t\tif (response.status == 429) {\n\t\t\tthis.exitCode = \"429\";\n\t\t\tthis.completed = false\n\t\t}\n\t\telse {\n\t\t\tthis.exitCode = \"OK!\"\n\t\t\tconsole.log(tmp)\n\t\t\tthis.completed = true\n\t\t}\n\t\tthis.APIData = tmp;\n\t\t*/\n\n\t\t/* //Not Async\n\t\tfetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t.then(response => {\n\t\t\tthis.APIData = response.data;\n\t\t\tconsole.log(this.APIData)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\talert(error)\n\t\t\t})\n\t\t\tthis.testing = typeof(this.APIData)\n\t\t*/\n\n\t\t// ----------------------------------------\n\n\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tthis.vueCanvas = ctx;\n\t\tconsole.log(this.vueCanvas)\n\n\t\tcanvas.height = window.innerHeight;\n\t\tcanvas.width = window.innerWidth;\n\t\tconsole.log(canvas.height, canvas.width)\n\n\t\tctx.fillRect(0,0,1501,300)\n\n\t\t/*\n\t\tvar canvas = $('canvas.dots');\n\t\t//var context = canvas[0].getContext('2d');\n\t\tvar canvasWidth = canvas.width();\n\t\tvar canvasHeight = canvas.height();\n\t\tlet i;\n\n\t\tconsole.log(canvasWidth)\n\t\tcanvas.attr({height: canvasHeight, width: canvasWidth});\n\n\t\t// Set an array of dot objects.\n\t\tvar dots = [\n\t\t\t{ x: 100, y: 100, radius: 25, xMove: '+', yMove: '+' },\n\t\t\t{ x: 40, y: 200, radius: 25, xMove: '-', yMove: '+' },\n\t\t\t{ x: 250, y: 300, radius: 25, xMove: '+', yMove: '-' },\n\t\t\t{ x: 150, y: 35, radius: 25, xMove: '-', yMove: '-' }\n\t\t];\n\n\t\t// Notice in the moveDot function we can make dots go faster if we increment\n\t\t// by more than 1 pixel each time.\n\t\t//var frameLength = 2;\n\n\t\t// Draw each dot in the dots array.\n\t\tfor( i = 0; i < dots.length; i++ ) {\n\t\t\tthis.drawDot(dots[i]);\n\t\t}\n\n\t\t//window.requestAnimationFrame(moveDot);\n\n\n\n\n\t\t// Render it again\n\t\t//window.requestAnimationFrame(moveDot);\n\t\t*/\n\n\t},\n\n\tmethods: {\n\n\t},\n\n}\n\n\n\n\n// ----------------------------------------\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n.hello {\n\tmargin: 60px 0px 0px 0px\n}\n\n#canvas {\n    border: 10px solid red;\n    height: 200px;\n    width: 500px\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}