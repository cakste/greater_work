{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-264e9b7a\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"canvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"canvas\", _hoisted_1);\n}","map":{"version":3,"mappings":";;;;;AAESA,IAAE,EAAC;;;uBAAXC,oBAA6B,QAA7B","names":["id","_createElementBlock"],"sourceRoot":"","sources":["/Users/cakste/test/greater_work/src/components/Dots.vue"],"sourcesContent":["<template>\n\n\t<canvas id=\"canvas\"></canvas>\n</template>\n\n<script>\n\nexport default {\n\tname: 'backgroundDots',\n\tcomponents: {\n\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tctx: null,\n\t\t\tdots: null,\n\t\t\twidth: 0,\n\t\t\theight: 0,\n\t\t}\n\t},\n\n\tmounted() {\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tthis.ctx = canvas.getContext(\"2d\");\n\n\t\t// Create random dots.\n\t\tthis.dots = []\n\t\tvar radius = 25;\n\t\tvar signs = ['-', '+']\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tvar dot = {};\n\t\t\tdot['x'] = Math.floor(Math.random()*(window.innerWidth-2*radius)) + radius\n\t\t\tdot['y'] = Math.floor(Math.random()*(window.innerHeight-2*radius)) + radius\n\t\t\tdot['xMove'] = signs[Math.floor(Math.random()*2)]\n\t\t\tdot['yMove'] = signs[Math.floor(Math.random()*2)]\n\t\t\tdot['radius'] = radius\n\t\t\tthis.dots.push(dot)\n\t\t}\n\n\t\t// Draw each dot in the dots array.\n\t\tfor (let i = 0; i < this.dots.length; i++) {\n\t\t\tthis.drawDot(this.dots[i])\n\t\t}\n\n\t\t// Continue to update dots. Update canvas size when window changes size.\n\t\twindow.setInterval(() => {\n\t\t\tdocument.getElementById(\"canvas\").width = window.innerWidth\n\t\t\tdocument.getElementById(\"canvas\").height = window.innerHeight\n\t\t\tthis.moveDot()\n\t\t}, 15)\n\t},\n\n\tmethods: {\n\t\tdrawDot(dot) {\n\t\t\tthis.ctx.beginPath()\n\t\t\tthis.ctx.arc(dot.x, dot.y, dot.radius, 0, 2 * Math.PI, false)\n\t\t\tthis.ctx.fillStyle = '#1e0072'\n\t\t\tthis.ctx.fill()\n\t\t},\n\t\tmoveDot() {\n\n\t\t\tvar dots = this.dots\n\t\t\tvar frameLength = 2\n\n\t\t\tthis.ctx.clearRect(0, 0, window.outerWidth, window.outerHeight)\n\n\t\t\t// Iterate over all the dots.\n\t\t\tfor(let i = 0; i < dots.length; i++ ) {\n\n\t\t\t\tif( dots[i].xMove == '+' ) {\n\t\t\t\t\tdots[i].x += frameLength\n\t\t\t\t} else {\n\t\t\t\t\tdots[i].x -= frameLength\n\t\t\t\t}\n\t\t\t\tif( dots[i].yMove == '+' ) {\n\t\t\t\t\tdots[i].y += frameLength\n\t\t\t\t} else {\n\t\t\t\t\tdots[i].y -= frameLength\n\t\t\t\t}\n\n\t\t\t\tthis.drawDot(dots[i])\n\n\t\t\t\tif ((dots[i].x + dots[i].radius) >= window.innerWidth ) {\n\t\t\t\t\tdots[i].xMove = '-';\n\t\t\t\t}\n\t\t\t\tif ((dots[i].x - dots[i].radius) <= 0 ) {\n\t\t\t\t\tdots[i].xMove = '+';\n\t\t\t\t}\n\t\t\t\tif ((dots[i].y + dots[i].radius) >= window.innerHeight ) {\n\t\t\t\t\tdots[i].yMove = '-';\n\t\t\t\t}\n\t\t\t\tif ((dots[i].y - dots[i].radius) <= 0 ) {\n\t\t\t\t\tdots[i].yMove = '+';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n}\n\n\n\n\n// ----------------------------------------\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n\n</style>\n"]},"metadata":{},"sourceType":"module"}