{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-783f90ce\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"table\"\n};\nconst _hoisted_2 = {\n  id: \"myTable1\"\n};\nconst _hoisted_3 = [\"onClick\"];\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"table\", null, [/*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createCommentVNode(\"-\\n\\t\\t\\t\\t<th v-for=\\\"col in columns\\\">\\n\\t\\t\\t\\t\\t{{col}}\\n\\t\\t\\t\\t</th>\\n\\t\\t\\t\")])])], -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"table\", _hoisted_2, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createCommentVNode(\"-Could change so i read in the Table headers as variables instead\\n\\t\\t\\t\\t\\tThen need to to a valitidy check of the data, so that all items in the json object\\n\\t\\t\\t\\t\\tcontains the same keys and values.\\n\\t\\t\\t\\t\\t<th>ID</th>\\n\\t\\t\\t\\t\\t<th>Employee Name</th>\\n\\t\\t\\t\\t\\t<th>Employee Salary</th>\\n\\t\\t\\t\\t\\t<th>Employee Age</th>\\n\\t\\t\\t\\t\\t<th>Profile Image</th>\\n\\t\\t\\t\\t\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, (col, i) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: i,\n      onClick: $event => $options.sortData(col)\n    }, _toDisplayString(col), 9\n    /* TEXT, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createCommentVNode(\"- Maybe change all _ to spaces to get a prettier table? \")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filledData, (user, i) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: i\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(user, (val, j) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: j\n      }, _toDisplayString(val), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    )), _createCommentVNode(\"-\\n\\t\\t\\t\\t<td> {{ user.id }} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_name}} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_salary }} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_age }} </td>\\n\\t\\t\\t\\t<td> {{ user.profile_image}} </td>\\n\\t\\t\\t\")]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]), _hoisted_4, _createElementVNode(\"p\", null, _toDisplayString($data.filledData), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;;;;AACOA,OAAK,EAAC;;;AACLC,IAAE,EAAC;;;;gEA8BVC,oBAWQ,OAXR,EAWQ,IAXR,EAWQ,cAVPA,oBAQQ,OARR,EAQQ,IARR,EAQQ,cAPPA,oBAMK,IANL,EAMK,IANL,EAMK,cALJC,yGAKI,CANL,CAOO,CARR,CAUO,CAXR;;AAAA;;;uBA/BCC,oBA4CM,KA5CN,cA4CM,CA3CPF,oBA6BQ,OA7BR,cA6BQ,CA5BPA,oBAeQ,OAfR,EAeQ,IAfR,EAeQ,CAdPA,oBAaK,IAbL,EAaK,IAbL,EAaK,CAZJC,8YAYI,qBAHJC,oBACyCC,SADzC,EACyC,IADzC,EACyCC,YADlBC,aACkB,EADX,CAAlBC,GAAkB,EAAbC,CAAa,KAAZ;yBAAlBL,oBACyC,IADzC,EACyC;AADRM,SAAG,EAAED,CACG;AAApCE,aAAK,YAAEC,kBAASJ,GAAT;AAA6B,KADzC,mBAC8BA,IAD9B,EACiC;AAAA;AADjC,MACiCK,UADjC;GACyC,CADzC;;AAAA,GAGI,GADHV,+EACG,CAbL,CAcO,CAfR,CA4BO,EAZPD,oBAWQ,OAXR,EAWQ,IAXR,EAWQ,oBAVPE,oBASKC,SATL,EASK,IATL,EASKC,YATmBC,gBASnB,EAT6B,CAAtBO,IAAsB,EAAhBL,CAAgB,KAAf;yBAAnBL,oBASK,IATL,EASK;AATgCM,SAAG,EAAED;AASrC,KATL,EAA2C,oBAC1CL,oBAAoDC,SAApD,EAAoD,IAApD,EAAoDC,YAA7BQ,IAA6B,EAAzB,CAAfC,GAAe,EAAVC,CAAU,KAAT;2BAAlBZ,oBAAoD,IAApD,EAAoD;AAAtBM,WAAG,EAAEM;AAAiB,OAApD,EAAoCC,iBAAKF,GAAL,CAApC,EAA4C;AAAA;AAA5C;KAAoD,CAApD;;AAAA,KAD0C,GAE1CZ,qPAF0C,CAA3C;GASK,CATL;;AAAA,GAUO,EAXR,CAYO,CA7BR,CA2CO,EAbPe,UAaO,EADPhB,oBAAuB,GAAvB,EAAuB,IAAvB,EAAuBe,iBAAjBV,gBAAiB,CAAvB,EAAgB;AAAA;AAAhB,GACO,CA5CN","names":["class","id","_createElementVNode","_createCommentVNode","_createElementBlock","_Fragment","_renderList","$data","col","i","key","onClick","$options","_hoisted_3","user","val","j","_toDisplayString","_hoisted_4"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Table.vue"],"sourcesContent":["<template>\n  <div class=\"table\">\n\t<table id=\"myTable1\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<!---Could change so i read in the Table headers as variables instead\n\t\t\t\t\tThen need to to a valitidy check of the data, so that all items in the json object\n\t\t\t\t\tcontains the same keys and values.\n\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t<th>Employee Name</th>\n\t\t\t\t\t<th>Employee Salary</th>\n\t\t\t\t\t<th>Employee Age</th>\n\t\t\t\t\t<th>Profile Image</th>\n\t\t\t\t-->\n\t\t\t\t<th v-for=\"(col, i) in columns\" :key=\"i\"\n\t\t\t\tv-on:click=\"sortData(col)\">{{ col }}</th>\n\t\t\t\t\t<!--- Maybe change all _ to spaces to get a prettier table? -->\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr v-for=\"(user, i) in filledData\" :key=\"i\">\n\t\t\t\t<td v-for=\"(val, j) in user\" :key=\"j\">{{ val }}</td>\n\t\t\t\t<!---\n\t\t\t\t<td> {{ user.id }} </td>\n\t\t\t\t<td> {{ user.employee_name}} </td>\n\t\t\t\t<td> {{ user.employee_salary }} </td>\n\t\t\t\t<td> {{ user.employee_age }} </td>\n\t\t\t\t<td> {{ user.profile_image}} </td>\n\t\t\t-->\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<!---\n\t\t\t\t<th v-for=\"col in columns\">\n\t\t\t\t\t{{col}}\n\t\t\t\t</th>\n\t\t\t-->\n\t\t\t</tr>\n\t\t</thead>\n\n\t</table>\n\t<p>{{ filledData }}</p>\n  </div>\n</template>\n\n\n\n<script>\n/* Todo\n\t* Create a refresh button?\n\n\n*/\n\nexport default {\n\tname: 'HelloWorld2',\n\tprops: {\n\t\tmsg2: String,\n\t},\n\n\tdata () {\n\t\treturn {\n\t\t\tusers: null,\n\t\t\tfilledData: null,\n\t\t\tcolumns: null,\n\t\t\tascending: true,\n\t\t\tsortCol: null,\n\t\t\tmessage: null,\n\t\t}\n\t},\n\n\tasync created () {\n\t\tconst data_fetched = false\n\n\t\t//Fetch the data upon creation of the component.\n\t\twhile (data_fetched === false) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t\tconst response_json = await response.json()\n\n\t\t\t\tthis.users = response_json.data\n\t\t\t\tthis.message = response_json.message\n\t\t\t\tconsole.log(response_json)\n\t\t\t\tbreak;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Error occured\")\n\t\t\t\t// Some type of sleep function? Not really sure how this too many requests occur.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tawait this.fillOutData();\n\n\t\tthis.filledData[2][\"employee_name\"] = 'Aunasdlkfajdslkfjsldk jflsdk jfslkd jflskd jflsdk jflsdkfj lskdjf lsiejfkdsjkl fjslkdj fsldkjf lsdk fsldkfj known'\n\n\t\tthis.columns = this.updateColumns()\n\n\t},\n\n\tcomputed: {\n\n\t},\n\n\tmethods: {\n\t\tfillOutData () {\n\t\t\t// We should not assume that all keys are the same in the rows.\n\t\t\tlet keyValues = []\n\t\t\tthis.filledData = this.users\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let key in this.filledData[i]) {\n\t\t\t\t\tif (!keyValues.includes(key)) {\n\t\t\t\t\t\tkeyValues.push(key)\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(key)\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(keyValues)\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let j = 0; j < keyValues.length; j++) {\n\t\t\t\t\t//console.log(this.filledData[i][keyValues[j]])\n\t\t\t\t\t//console.log(keyValues[j])\n\t\t\t\t\tif (!(keyValues[j] in this.filledData[i])) {\n\t\t\t\t\t\tthis.filledData[i][keyValues[j]] = 'unknown';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateColumns () {\n\t\t\t//Gets columns based on our computed value.\n\t\t\tconst columns = []\n\n\t\t\tif (this.filledData !== null) {\n\t\t\t\t// Should try if an empty list crashes this!\n\t\t\t\tfor (let key in this.filledData[0]) {\n\t\t\t\t\tcolumns.push(key)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Return null in getColumns\")\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tconsole.log(\"Returning columns\")\n\t\t\tconsole.log(columns)\n\t\t\treturn columns\n\t\t},\n\t\tsortData (col) {\n\t\t\tif (this.sortCol === col) {\n\t\t\t\tthis.ascending = !this.ascending\n\t\t\t} else {\n\t\t\t\tthis.ascending = true\n\t\t\t\tthis.sortCol = col\n\t\t\t}\n\t\t\tvar ascending = this.ascending\n\t\t\tthis.filledData.sort(function(a,b) {\n\t\t\t\t// Put unknown values at bottom in sorting. If a value is set to unknown in the actual data,\n\t\t\t\t// this will also be set at the bottom.\n\t\t\t\tif (a[col] === 'unknown' || b[col] === 'unknown') {\n\t\t\t\t\tif (a[col] === 'unknown' && b[col] === 'unknown') {\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t}\n\t\t\t\t\tif (a[col] === 'unknown' && b[col] !== 'unknown') {\n\t\t\t\t\t\treturn ascending ? 1 : -1\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn ascending ? -1 : 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Normal sorting.\n\t\t\t\tif (a[col] > b[col]) {\n\t\t\t\t\treturn ascending ? 1 : -1\n\t\t\t\t} else if (a[col] < b[col]) {\n\t\t\t\t\treturn ascending ? -1 : 1\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t})\n\t\t\tconsole.log(col)\n\n\n\t\t},\n\t}\n}\n\n\n</script>\n\n<style scoped>\n\ntable {\n  font-family: 'Open Sans', sans-serif;\n  width: 750px;\n  border-collapse: collapse;\n  border: 3px solid #44475C;\n  margin: 10px 10px 0 10px;\n}\n\ntable th {\n  text-transform: uppercase;\n  text-align: left;\n  background: #44475C;\n  color: #FFF;\n  padding: 8px;\n  min-width: 30px;\n}\n\ntable td {\n  text-align: left;\n  padding: 8px;\n  border-right: 2px solid #7D82A8;\n}\ntable td:last-child {\n  border-right: none;\n}\ntable tbody tr:nth-child(2n) td {\n  background: #D4D8F9;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}