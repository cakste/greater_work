{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-783f90ce\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"table\"\n};\nconst _hoisted_2 = {\n  id: \"myTable1\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"pagination\"\n};\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"table\", _hoisted_2, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createCommentVNode(\"-Could change so i read in the Table headers as variables instead\\n\\t\\t\\t\\t\\tThen need to to a valitidy check of the data, so that all items in the json object\\n\\t\\t\\t\\t\\tcontains the same keys and values.\\n\\t\\t\\t\\t\\t<th>ID</th>\\n\\t\\t\\t\\t\\t<th>Employee Name</th>\\n\\t\\t\\t\\t\\t<th>Employee Salary</th>\\n\\t\\t\\t\\t\\t<th>Employee Age</th>\\n\\t\\t\\t\\t\\t<th>Profile Image</th>\\n\\t\\t\\t\\t\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, (col, i) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: i,\n      onClick: $event => $options.sortData(col)\n    }, _toDisplayString(col), 9\n    /* TEXT, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createCommentVNode(\"- Maybe change all _ to spaces to get a prettier table? \")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filledData, (user, i) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: i\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(user, (val, j) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: j\n      }, _toDisplayString(val), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    )), _createCommentVNode(\"-\\n\\t\\t\\t\\t<td> {{ user.id }} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_name}} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_salary }} </td>\\n\\t\\t\\t\\t<td> {{ user.employee_age }} </td>\\n\\t\\t\\t\\t<td> {{ user.profile_image}} </td>\\n\\t\\t\\t\")]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.numPages(), i => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"number\", [i == $data.currentPage ? 'active' : '']]),\n      key: i,\n      onClick: $event => $options.changePage(i)\n    }, _toDisplayString(i), 11\n    /* TEXT, CLASS, PROPS */\n    , _hoisted_5);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"p\", null, _toDisplayString($data.filledData), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;;;;AACOA,OAAK,EAAC;;;AACLC,IAAE,EAAC;;;;AA8BLD,OAAK,EAAC;;;;uBA/BVE,oBAuCM,KAvCN,cAuCM,CAtCPC,oBA6BQ,OA7BR,cA6BQ,CA5BPA,oBAeQ,OAfR,EAeQ,IAfR,EAeQ,CAdPA,oBAaK,IAbL,EAaK,IAbL,EAaK,CAZJC,8YAYI,qBAHJF,oBACyCG,SADzC,EACyC,IADzC,EACyCC,YADlBC,aACkB,EADX,CAAlBC,GAAkB,EAAbC,CAAa,KAAZ;yBAAlBP,oBACyC,IADzC,EACyC;AADRQ,SAAG,EAAED,CACG;AAApCE,aAAK,YAAEC,kBAASJ,GAAT;AAA6B,KADzC,mBAC8BA,IAD9B,EACiC;AAAA;AADjC,MACiCK,UADjC;GACyC,CADzC;;AAAA,GAGI,GADHT,+EACG,CAbL,CAcO,CAfR,CA4BO,EAZPD,oBAWQ,OAXR,EAWQ,IAXR,EAWQ,oBAVPD,oBASKG,SATL,EASK,IATL,EASKC,YATmBC,gBASnB,EAT6B,CAAtBO,IAAsB,EAAhBL,CAAgB,KAAf;yBAAnBP,oBASK,IATL,EASK;AATgCQ,SAAG,EAAED;AASrC,KATL,EAA2C,oBAC1CP,oBAAoDG,SAApD,EAAoD,IAApD,EAAoDC,YAA7BQ,IAA6B,EAAzB,CAAfC,GAAe,EAAVC,CAAU,KAAT;2BAAlBd,oBAAoD,IAApD,EAAoD;AAAtBQ,WAAG,EAAEM;AAAiB,OAApD,EAAoCC,iBAAKF,GAAL,CAApC,EAA4C;AAAA;AAA5C;KAAoD,CAApD;;AAAA,KAD0C,GAE1CX,qPAF0C,CAA3C;GASK,CATL;;AAAA,GAUO,EAXR,CAYO,CA7BR,CAsCO,EARPD,oBAMM,KANN,cAMM,oBALLD,oBAIMG,SAJN,EAIM,IAJN,EAIMC,YAHMM,mBAGN,EAHCH,CAAa,IAAZ;yBADRP,oBAIM,KAJN,EAIM;AAJDF,WAAK,mBAAC,QAAD,EAAS,CAEJS,CAAC,IAAIF,iBAAL,GAAgB,QAAhB,GAAgB,EAFZ,CAAT,EAIJ;AAHmBG,SAAG,EAAED,CAGxB;AADDE,aAAK,YAAEC,oBAAWH,CAAX;AACN,KAJN,mBAG6BA,EAH7B,EAG8B;AAAA;AAH9B,MAG8BS,UAH9B;GAIM,CAJN;;AAAA,GAKK,EANN,CAQO,EADPf,oBAAuB,GAAvB,EAAuB,IAAvB,EAAuBc,iBAAjBV,gBAAiB,CAAvB,EAAgB;AAAA;AAAhB,GACO,CAvCN","names":["class","id","_createElementBlock","_createElementVNode","_createCommentVNode","_Fragment","_renderList","$data","col","i","key","onClick","$options","_hoisted_3","user","val","j","_toDisplayString","_hoisted_5"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Table.vue"],"sourcesContent":["<template>\n  <div class=\"table\">\n\t<table id=\"myTable1\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<!---Could change so i read in the Table headers as variables instead\n\t\t\t\t\tThen need to to a valitidy check of the data, so that all items in the json object\n\t\t\t\t\tcontains the same keys and values.\n\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t<th>Employee Name</th>\n\t\t\t\t\t<th>Employee Salary</th>\n\t\t\t\t\t<th>Employee Age</th>\n\t\t\t\t\t<th>Profile Image</th>\n\t\t\t\t-->\n\t\t\t\t<th v-for=\"(col, i) in columns\" :key=\"i\"\n\t\t\t\tv-on:click=\"sortData(col)\">{{ col }}</th>\n\t\t\t\t\t<!--- Maybe change all _ to spaces to get a prettier table? -->\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr v-for=\"(user, i) in filledData\" :key=\"i\">\n\t\t\t\t<td v-for=\"(val, j) in user\" :key=\"j\">{{ val }}</td>\n\t\t\t\t<!---\n\t\t\t\t<td> {{ user.id }} </td>\n\t\t\t\t<td> {{ user.employee_name}} </td>\n\t\t\t\t<td> {{ user.employee_salary }} </td>\n\t\t\t\t<td> {{ user.employee_age }} </td>\n\t\t\t\t<td> {{ user.profile_image}} </td>\n\t\t\t-->\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<div class=\"pagination\">\n\t\t<div class=\"number\"\n\t\tv-for=\"i in numPages()\" :key=\"i\"\n\t\tv-bind:class=\"[i == currentPage ? 'active' : '']\"\n\t\tv-on:click=\"changePage(i)\">{{i}}\n\t\t</div>\n\t</div>\n\t<p>{{ filledData }}</p>\n  </div>\n</template>\n\n\n\n<script>\n/* Todo\n\t* Create a refresh button?\n\n\n*/\n\nexport default {\n\tname: 'HelloWorld2',\n\tprops: {\n\t\tmsg2: String,\n\t},\n\n\tdata () {\n\t\treturn {\n\t\t\tusers: null,\n\t\t\tfilledData: null,\n\t\t\tcolumns: null,\n\t\t\tusersPerPage: 10,\n\t\t\tcurrentPage: 0,\n\t\t\tascending: true,\n\t\t\tsortCol: null,\n\t\t\tmessage: null,\n\t\t}\n\t},\n\n\tasync created () {\n\t\tconst data_fetched = false\n\n\t\t//Fetch the data upon creation of the component.\n\t\twhile (data_fetched === false) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t\tconst response_json = await response.json()\n\n\t\t\t\tthis.users = response_json.data\n\t\t\t\tthis.message = response_json.message\n\t\t\t\tconsole.log(response_json)\n\t\t\t\tbreak;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Error occured\")\n\t\t\t\t// Some type of sleep function? Not really sure how this too many requests occur.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tawait this.fillOutData();\n\n\t\t//this.filledData[2][\"employee_name\"] = 'unknown'\n\n\t\tthis.columns = this.updateColumns()\n\n\t},\n\n\tcomputed: {\n\t\tgetRows () {\n\n\n\n\t\t}\n\n\t},\n\n\tmethods: {\n\t\tfillOutData () {\n\t\t\t// We should not assume that all keys are the same in the rows.\n\t\t\tlet keyValues = []\n\t\t\tthis.filledData = this.users\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let key in this.filledData[i]) {\n\t\t\t\t\tif (!keyValues.includes(key)) {\n\t\t\t\t\t\tkeyValues.push(key)\n\t\t\t\t\t}\n\t\t\t\t\t//console.log(key)\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(keyValues)\n\n\t\t\tfor (let i = 0; i < this.filledData.length; i++) {\n\t\t\t\tfor (let j = 0; j < keyValues.length; j++) {\n\t\t\t\t\t//console.log(this.filledData[i][keyValues[j]])\n\t\t\t\t\t//console.log(keyValues[j])\n\t\t\t\t\tif (!(keyValues[j] in this.filledData[i])) {\n\t\t\t\t\t\tthis.filledData[i][keyValues[j]] = 'unknown';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateColumns () {\n\t\t\t//Gets columns based on our computed value.\n\t\t\tconst columns = []\n\n\t\t\tif (this.filledData !== null) {\n\t\t\t\t// Should try if an empty list crashes this!\n\t\t\t\tfor (let key in this.filledData[0]) {\n\t\t\t\t\tcolumns.push(key)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Return null in getColumns\")\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tconsole.log(\"Returning columns\")\n\t\t\tconsole.log(columns)\n\t\t\treturn columns\n\t\t},\n\t\tsortData (col) {\n\t\t\tif (this.sortCol === col) {\n\t\t\t\tthis.ascending = !this.ascending\n\t\t\t} else {\n\t\t\t\tthis.ascending = true\n\t\t\t\tthis.sortCol = col\n\t\t\t}\n\t\t\tvar ascending = this.ascending\n\t\t\tthis.filledData.sort(function(a,b) {\n\t\t\t\t// Put unknown values at bottom in sorting. If a value is set to unknown in the actual data,\n\t\t\t\t// this will also be set at the bottom.\n\t\t\t\tif (a[col] === 'unknown' || b[col] === 'unknown') {\n\t\t\t\t\tif (a[col] === 'unknown' && b[col] === 'unknown') {\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t}\n\t\t\t\t\tif (a[col] === 'unknown' && b[col] !== 'unknown') {\n\t\t\t\t\t\treturn ascending ? 1 : -1\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn ascending ? -1 : 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Normal sorting.\n\t\t\t\tif (a[col] > b[col]) {\n\t\t\t\t\treturn ascending ? 1 : -1\n\t\t\t\t} else if (a[col] < b[col]) {\n\t\t\t\t\treturn ascending ? -1 : 1\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t})\n\t\t\tconsole.log(col)\n\t\t},\n\t\tnumPages () {\n\t\t\tif (this.filledData === null) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\tlet x = Math.ceil(this.filledData.length / this.usersPerPage)\n\t\t\tconsole.log(x)\n\t\t\treturn x\n\t\t},\n\t\tchangePage (i) {\n\t\t\tthis.currentPage = i\n\t\t}\n\t}\n}\n\n\n</script>\n\n<style scoped>\n\ntable {\n  font-family: 'Open Sans', sans-serif;\n  width: 750px;\n  border-collapse: collapse;\n  border: 3px solid #44475C;\n  margin: 10px 10px 0 10px;\n}\n\ntable th {\n  text-transform: uppercase;\n  text-align: left;\n  background: #44475C;\n  color: #FFF;\n  cursor: pointer;\n  padding: 8px;\n  min-width: 30px;\n}\ntable th:hover {\n        background: #717699;\n      }\ntable td {\n  text-align: left;\n  padding: 8px;\n  border-right: 2px solid #7D82A8;\n}\ntable td:last-child {\n  border-right: none;\n}\ntable tbody tr:nth-child(2n) td {\n  background: #D4D8F9;\n}\n\ntable {\n  font-family: 'Open Sans', sans-serif;\n  width: 750px;\n  border-collapse: collapse;\n  border: 3px solid #44475C;\n  margin: 10px 10px 0 10px;\n}\n\ntable th {\n  text-transform: uppercase;\n  text-align: left;\n  background: #44475C;\n  color: #FFF;\n  cursor: pointer;\n  padding: 8px;\n  min-width: 30px;\n}\ntable th:hover {\n        background: #717699;\n      }\ntable td {\n  text-align: left;\n  padding: 8px;\n  border-right: 2px solid #7D82A8;\n}\ntable td:last-child {\n  border-right: none;\n}\ntable tbody tr:nth-child(2n) td {\n  background: #D4D8F9;\n}\n\n.pagination {\n  font-family: 'Open Sans', sans-serif;\n  text-align: right;\n  width: 750px;\n  padding: 8px;\n}\n\n.arrow {\n  float: right;\n  width: 12px;\n  height: 15px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position-y: bottom;\n}\n\n.number {\n  display: inline-block;\n  padding: 4px 10px;\n  color: #FFF;\n  border-radius: 4px;\n  background: #44475C;\n  margin: 0px 5px;\n  cursor: pointer;\n}\n.number:hover, .number.active {\n  background: #717699;\n}\n\n\n</style>\n"]},"metadata":{},"sourceType":"module"}