{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-b8c705b0\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"Dots2\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"canvas\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;;;AACOA,IAAE,EAAC;;;gEACPC,oBAA6B,QAA7B,EAA6B;AAArBD,IAAE,EAAC;AAAkB,CAA7B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;oBAAAE;;uBADDC,oBAEM,KAFN,cAEMC,UAFN","names":["id","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["/Users/cakste/Desktop/website-v3/src/components/Dots2.vue"],"sourcesContent":["<template>\n\t\t<div id=\"Dots2\">\n\t\t\t<canvas id=\"canvas\"></canvas>\n\t\t</div>\n</template>\n\n<!--// Access a child components variables? Nice to include their message. -->\n\n<script>\n\nexport default {\n\tname: 'backgroundDots',\n\tcomponents: {\n\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tctx: null,\n\t\t\tvueCanvas: null,\n\t\t\tdots: null,\n\t\t}\n\t},\n\n\tmounted() {\n\t\t// Try Async\n\t\t/*\n\t\tconst response = await fetch(\"http://dummy.restapiexample.com/api/v1/employees\");\n\t\tconst tmp = await response.data;\n\t\tif (response.status == 429) {\n\t\t\tthis.exitCode = \"429\";\n\t\t\tthis.completed = false\n\t\t}\n\t\telse {\n\t\t\tthis.exitCode = \"OK!\"\n\t\t\tconsole.log(tmp)\n\t\t\tthis.completed = true\n\t\t}\n\t\tthis.APIData = tmp;\n\t\t*/\n\n\t\t/* //Not Async\n\t\tfetch(\"http://dummy.restapiexample.com/api/v1/employees\")\n\t\t\t.then(response => {\n\t\t\tthis.APIData = response.data;\n\t\t\tconsole.log(this.APIData)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\talert(error)\n\t\t\t})\n\t\t\tthis.testing = typeof(this.APIData)\n\t\t*/\n\n\t\t// ----------------------------------------\n\n\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tthis.ctx = canvas.getContext(\"2d\");\n\t\tthis.vueCanvas = this.ctx;\n\t\tconsole.log(this.vueCanvas)\n\n\n\t\t//Does not need if we don't set CSS attributes\n\t\tvar canvasWidth = window.innerWidth;\n\t\tvar canvasHeight = window.innerHeight;\n\t\tconsole.log(canvasWidth, canvasHeight)\n\t\t/*\n\t\tthis.ctx.fillStyle = \"#42b983\"\n\t\tthis.ctx.arc(0,0,50,0, 3.14*2);\n\t\tthis.ctx.fill()\n\t\t*/\n\n\n\n\t\t// Set an array of dot objects.\n\t\tthis.dots = [\n\t\t\t{ x: 200, y: 100, radius: 25, xMove: '+', yMove: '+' },\n\t\t\t{ x: 40, y: 200, radius: 25, xMove: '-', yMove: '+' },\n\t\t\t{ x: 250, y: 300, radius: 25, xMove: '+', yMove: '-' },\n\t\t\t{ x: 150, y: 35, radius: 25, xMove: '-', yMove: '-' }\n\t\t];\n\n\t\t// Draw each dot in the dots array.\n\t\tfor(let i = 0; i < this.dots.length; i++ ) {\n\t\t\tthis.drawDot(this.dots[i]);\n\t\t}\n\n\t\t//Set the edge of the canvas to always be window? canvas.attr({height: canvasHeight, width: canvasWidth});\n\n\n\n\t\twindow.setInterval(() => {\n\t\t\twindow.requestAnimationFrame(this.moveDot);\n\t\t}, 100)\n\n\t\t//Get to canvas css?canvas.attr({height: canvas.height, width: canvas.width});\n\t\t/*\n\t\tvar canvas = $('canvas.dots');\n\t\t//var context = canvas[0].getContext('2d');\n\t\tvar canvasWidth = canvas.width();\n\t\tvar canvasHeight = canvas.height();\n\t\tlet i;\n\n\t\tconsole.log(canvasWidth)\n\t\tcanvas.attr({height: canvasHeight, width: canvasWidth});\n\n\n\n\n\n\t\t//window.requestAnimationFrame(moveDot);\n\n\n\n\n\t\t// Render it again\n\t\t//window.requestAnimationFrame(moveDot);\n\t\t*/\n\n\t},\n\n\tmethods: {\n\t\tdrawDot(dot) {\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(dot.x, dot.y, dot.radius, 0, 2 * Math.PI);\n\t\t\tthis.ctx.fillStyle = '#F03C69';\n\t\t\tthis.ctx.fill();\n\t\t},\n\t\tmoveDot() {\n\n\t\t\tvar dots = this.dots\n\t\t\t// Notice in the moveDot function we can make dots go faster if we increment\n\t\t\t// by more than 1 pixel each time.\n\t\t\tvar frameLength = 2;\n\n\t\t\tthis.ctx.clearRect(0, 0, window.innerWidth, window.innerHeight)\n\t\t\t// Iterate over all the dots.\n\t\t\tfor(let i = 0; i < dots.length; i++ ) {\n\n\t\t\t\tif( dots[i].xMove == '+' ) {\n\t\t\t\t\tdots[i].x += frameLength;\n\t\t\t\t} else {\n\t\t\t\t\tdots[i].x -= frameLength;\n\t\t\t\t}\n\t\t\t\tif( dots[i].yMove == '+' ) {\n\t\t\t\t\tdots[i].y += frameLength;\n\t\t\t\t} else {\n\t\t\t\t\tdots[i].y -= frameLength;\n\t\t\t\t}\n\n\t\t\t\tthis.drawDot(dots[i])\n\n\t\t\t\tif( (dots[i].x + dots[i].radius) >= window.innerWidth ) {\n\t\t\t\t\tdots[i].xMove = '-';\n\t\t\t\t}\n\t\t\t\tif( (dots[i].x - dots[i].radius) <= 0 ) {\n\t\t\t\t\tdots[i].xMove = '+';\n\t\t\t\t}\n\t\t\t\tif( (dots[i].y + dots[i].radius) >= window.innerHeight ) {\n\t\t\t\t\tdots[i].yMove = '-';\n\t\t\t\t}\n\t\t\t\tif( (dots[i].y - dots[i].radius) <= 0 ) {\n\t\t\t\t\tdots[i].yMove = '+';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n}\n\n\n\n\n// ----------------------------------------\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#canvas {\n\tborder: 3px solid black;\n\tposition: absolute;\n\n}\n#Dots2 {\n\theight: inherit;\n\twidth: inherit;\n\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}